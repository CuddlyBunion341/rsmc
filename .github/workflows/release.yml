name: Release

# on:
#   push:
#     tags:
#       - '*'
# TODO: remove temporary push
on: [push]

env:
  add_binaries_to_github_release: true
  itch_target: CuddlyBunion341/rsmc
  use_git_lfs: true

jobs:
  build-server-ubuntu:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [wasm32-unknown-unknown, x86_64-unknown-linux-gnu]
        binary: [server]
    steps:
      - uses: olegtarasov/get-tag@v2.1.2
        id: get_version
      - uses: actions/checkout@v4
        with:
          lfs: ${{ env.use_git_lfs }}
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install dependencies
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libx11-dev libasound2-dev libudev-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev

      - name: Install wasm-bindgen-cli
        if: matrix.target == 'wasm32-unknown-unknown'
        run: cargo install wasm-bindgen-cli

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }} --bin ${{ matrix.binary }}

      - name: Prepare package
        run: |
          if [ "${{ matrix.target }}" == "wasm32-unknown-unknown" ]; then
            wasm-bindgen --no-typescript --out-name ${{ matrix.binary }} --out-dir wasm/${{ matrix.binary }} --target web target/wasm32-unknown-unknown/release/${{ matrix.binary }}.wasm
            cp -r assets wasm/${{ matrix.binary }}/ || true
          else
            mkdir -p linux/${{ matrix.binary }}
            cp target/${{ matrix.target }}/release/${{ matrix.binary }} linux/${{ matrix.binary }}/
            cp -r assets linux/${{ matrix.binary }}/ || true
          fi

      - name: Package as a zip
        run: |
          if [ "${{ matrix.target }}" == "wasm32-unknown-unknown" ]; then
            cd wasm/${{ matrix.binary }} && zip --recurse-paths ../../${{ matrix.binary }}.zip .
          else
            cd linux/${{ matrix.binary }} && zip --recurse-paths ../../${{ matrix.binary }}.zip .
          fi

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ${{ matrix.binary }}.zip
          name: ${{ matrix.target }}-${{ matrix.binary }}
          retention-days: 1

      - name: Upload binaries to release
        if: ${{ env.add_binaries_to_github_release == 'true' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ matrix.binary }}.zip
          asset_name: ${{ matrix.binary }}-${{ matrix.target }}-${{ steps.get_version.outputs.tag }}.zip
          tag: ${{ github.ref }}
          overwrite: true

  build-client-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x86_64-pc-windows-msvc]
        binary: [client]
    steps:
      - uses: olegtarasov/get-tag@v2.1.2
        id: get_version
      - uses: actions/checkout@v4
        with:
          lfs: ${{ env.use_git_lfs }}
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }} --bin ${{ matrix.binary }}

      - name: Prepare package
        run: |
          mkdir -p windows/${{ matrix.binary }}
          cp target/x86_64-pc-windows-msvc/release/${{ matrix.binary }}.exe windows/${{ matrix.binary }}/
          mkdir assets -ea 0
          cp -r assets windows/${{ matrix.binary }}/

      - name: Package as a zip
        run: Compress-Archive -Path windows/${{ matrix.binary }}/* -DestinationPath ${{ matrix.binary }}.zip

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ${{ matrix.binary }}.zip
          name: ${{ matrix.target }}-${{ matrix.binary }}
          retention-days: 1

      - name: Upload binaries to release
        if: ${{ env.add_binaries_to_github_release == 'true' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ matrix.binary }}.zip
          asset_name: ${{ matrix.binary }}-${{ matrix.target }}-${{ steps.get_version.outputs.tag }}.zip
          tag: ${{ github.ref }}
          overwrite: true

  build-macos:
    runs-on: macOS-latest
    strategy:
      matrix:
        target: [x86_64-apple-darwin, aarch64-apple-darwin]
        binary: [server, client]
    steps:
      - uses: olegtarasov/get-tag@v2.1.2
        id: get_version
      - uses: actions/checkout@v4
        with:
          lfs: ${{ env.use_git_lfs }}
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Environment setup for MacOS
        run: |
          if [ "${{ matrix.target }}" == "x86_64-apple-darwin" ]; then
            export CFLAGS="-fno-stack-check"
            export MACOSX_DEPLOYMENT_TARGET="10.9"
          elif [ "${{ matrix.target }}" == "aarch64-apple-darwin" ]; then
            export MACOSX_DEPLOYMENT_TARGET="11"
          fi

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }} --bin ${{ matrix.binary }}

      - name: Prepare package
        run: |
          mkdir -p ${{ matrix.binary }}.app/Contents/MacOS
          cp target/${{ matrix.target }}/release/${{ matrix.binary }} ${{ matrix.binary }}.app/Contents/MacOS/
          cp -r assets ${{ matrix.binary }}.app/Contents/MacOS/ || true
          hdiutil create -fs HFS+ -volname "${{ matrix.binary }}" -srcfolder ${{ matrix.binary }}.app ${{ matrix.binary }}-${{ matrix.target }}.dmg

      - name: Package as a zip
        run: mv ${{ matrix.binary }}-${{ matrix.target }}.dmg ${{ matrix.binary }}.zip

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ${{ matrix.binary }}.zip
          name: ${{ matrix.target }}-${{ matrix.binary }}
          retention-days: 1

      - name: Upload binaries to release
        if: ${{ env.add_binaries_to_github_release == 'true' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ matrix.binary }}.zip
          asset_name: ${{ matrix.binary }}-${{ matrix.target }}-${{ steps.get_version.outputs.tag }}.zip
          tag: ${{ github.ref }}
          overwrite: true

  check-if-upload-to-itch-is-configured:
    runs-on: ubuntu-latest
    outputs:
      should-upload: ${{ steps.check-env.outputs.has-itch-target }}
    steps:
      - id: check-env
        run: |
          if [[ -z "$itch_target" ]]; then
            echo "has-itch-target=no" >> $GITHUB_OUTPUT
          else
            echo "has-itch-target=yes" >> $GITHUB_OUTPUT

  upload-to-itch:
    runs-on: ubuntu-latest
    needs:
      - check-if-upload-to-itch-is-configured
      - build-server-ubuntu
      - build-client-windows
      - build-macos
    if: ${{ needs.check-if-upload-to-itch-is-configured.outputs.should-upload == 'yes' }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./builds

      - name: Install butler
        run: |
          curl -L -o butler.zip https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default
          unzip butler.zip
          chmod +x butler
          ./butler -V
      - uses: olegtarasov/get-tag@v2.1.2
        id: get_version
      - name: Upload to itch.io
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_CREDENTIALS }}
        run: |
          for channel in $(ls builds); do
            ./butler push \
                --fix-permissions \
                --userversion="${{ steps.get_version.outputs.tag }}" \
                builds/$channel/* \
                ${{ env.itch_target }}:$channel
